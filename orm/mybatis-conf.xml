<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--参考：http://www.mybatis.org/mybatis-3/zh/configuration.html-->
<configuration>

    <!--这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。
        然后其中的属性就可以在整个配置文件中被用来替换需要动态配置的属性值。

        如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：

        1. 在 properties 元素体内指定的属性首先被读取。
        2. 然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。
        3. 最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。

        因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties 属性中指定的属性。

        总结：
            加载顺序：    在 properties 元素体内指定的属性 ==> properties 元素中的 resource 属性指定的文件 ==> 方法参数传递的属性;
            优先级高到低: 方法参数传递的属性 > properties 元素中的 resource 属性指定的文件 > 在 properties 元素体内指定的属性

        -->
    <properties resource="org/apache/ibatis/databases/blog/blog-derby.properties">
        <property name="password" value="root121121"/>

        <!-- 启用默认值特性 -->
        <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
        <!-- 如果属性 'username' 没有被配置，'username' 属性的值将为 'ut_user' -->
        <property name="username" value="${username:ut_user}"/>
        <!-- 修改默认值的分隔符 -->
        <property name="org.apache.ibatis.parsing.PropertyParser.default-value-separator" value="?:"/>
        <property name="xxx" value="${db:xxx?:ut_user}"/>
    </properties>

    <settings>
        <!-- cacheEnabled	全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。有效值: true | false	true -->
        <setting name="cacheEnabled" value="true"/>
        <!-- lazyLoadingEnabled	延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。有效值: true | false	false -->
        <setting name="lazyLoadingEnabled" value="false"/>
        <!-- aggressiveLazyLoading	当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载
        （参考 lazyLoadTriggerMethods)。	有效值: true | false	false （在 3.4.1 及之前的版本默认值为 true） -->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!-- multipleResultSetsEnabled	是否允许单一语句返回多结果集（需要驱动支持）。	有效值: true | false	true -->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!-- useColumnLabel	使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。	有效值: true | false	true -->
        <setting name="useColumnLabel" value="true"/>
        <!-- useGeneratedKeys	允许 JDBC 支持自动生成主键，需要驱动支持。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些
        驱动不能支持但仍可正常工作（比如 Derby）。	有效值: true | false	False -->
        <setting name="useGeneratedKeys" value="false"/>
        <!-- autoMappingBehavior	指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义
        嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。	有效值: NONE, PARTIAL, FULL	PARTIAL -->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!-- autoMappingUnknownColumnBehavior	指定发现自动映射目标未知列（或者未知属性类型）的行为。
        NONE: 不做任何反应
        WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)
        FAILING: 映射失败 (抛出 SqlSessionException)
        有效值: NONE, WARNING, FAILING	NONE -->
        <setting name="autoMappingUnknownColumnBehavior" value="NONE"/>
        <!-- defaultExecutorType	配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）；
         BATCH 执行器将重用语句并执行批量更新。	有效值: SIMPLE REUSE BATCH	SIMPLE -->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!-- defaultStatementTimeout	设置超时时间，它决定驱动等待数据库响应的秒数。	有效值: 任意正整数	未设置 (null) -->
<!--        <setting name="defaultStatementTimeout" value=""/>-->
        <!-- defaultFetchSize	为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。	有效值: 任意正整数	未设置 (null) -->
<!--        <setting name="defaultFetchSize" value=""/>-->
        <!-- defaultResultSetType	Specifies a scroll strategy when omit it per statement settings. (Since: 3.5.2)
        有效值: FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT(same behavior with 'Not Set')	Not Set (null) -->
<!--        <setting name="defaultResultSetType" value=""/>-->
        <!-- safeRowBoundsEnabled	允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。	有效值: true | false	False -->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!-- safeResultHandlerEnabled	允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为 false。	有效值: true | false	True -->
        <setting name="safeResultHandlerEnabled" value="true"/>
        <!-- mapUnderscoreToCamelCase	是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java
        属性名 aColumn 的类似映射。	有效值: true | false	False -->
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <!-- localCacheScope	MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。
        默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession
         的不同调用将不会共享数据。	有效值: SESSION | STATEMENT	SESSION -->
        <setting name="localCacheScope" value="SESSION"/>
        <!-- jdbcTypeForNull	当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况
        直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。	JdbcType 常量，常用值：NULL, VARCHAR 或 OTHER。	OTHER -->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!-- lazyLoadTriggerMethods	指定哪个对象的方法触发一次延迟加载。	有效值: 用逗号分隔的方法列表。	equals,clone,hashCode,toString -->
<!--        <setting name="lazyLoadTriggerMethods" value=""/>-->
        <!-- defaultScriptingLanguage	指定动态 SQL 生成的默认语言。	有效值: 一个类型别名或完全限定类名。	org.apache.ibatis.scripting.xmltags.XMLLanguageDriver -->
<!--        <setting name="defaultScriptingLanguage" value=""/>-->
        <!-- defaultEnumTypeHandler	指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5）	有效值: 一个类型别名或完全限定类名。	org.apache.ibatis.type.EnumTypeHandler -->
<!--        <setting name="defaultEnumTypeHandler" value=""/>-->
        <!-- callSettersOnNulls	指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet()
        或 null 值初始化的时候比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。	有效值: true | false	false -->
        <setting name="callSettersOnNulls" value="false"/>
        <!-- returnInstanceForEmptyRow	当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。
         请注意，它也适用于嵌套的结果集 （如集合或关联）。（新增于 3.4.2）	有效值: true | false	false -->
        <setting name="returnInstanceForEmptyRow" value="false"/>
        <!-- logPrefix	指定 MyBatis 增加到日志名称的前缀。	任何字符串	未设置 -->
<!--        <setting name="logPrefix" value=""/>-->
        <!-- logImpl	指定 MyBatis 所用日志的具体实现，未指定时将自动查找。有效值: 	SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING	未设置 -->
<!--        <setting name="logImpl" value=""/>-->
        <!-- proxyFactory	指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。有效值: 	CGLIB | JAVASSIST	JAVASSIST （MyBatis 3.3 以上） -->
        <setting name="proxyFactory" value="JAVASSIST"/>
        <!-- vfsImpl	指定 VFS 的实现	有效值: 自定义 VFS 的实现的类全限定名，以逗号分隔。	未设置 -->
<!--        <setting name="vfsImpl" value=""/>-->
        <!-- useActualParamName	允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）有效值: 	true | false	true -->
        <setting name="useActualParamName" value="true"/>
        <!-- configurationFactory	指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。
        这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3）有效值: 	类型别名或者全类名.	未设置 -->
<!--        <setting name="configurationFactory" value=""/>-->

    </settings>

    <!--类型别名是为 Java 类型设置一个短的名字。 它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。例如：-->
    <typeAliases>
        <typeAlias alias="Author" type="org.apache.ibatis.domain.blog.Author"/>
        <typeAlias alias="Blog" type="org.apache.ibatis.domain.blog.Blog"/>
        <typeAlias alias="Comment" type="org.apache.ibatis.domain.blog.Comment"/>
        <typeAlias alias="Post" type="org.apache.ibatis.domain.blog.Post"/>
        <typeAlias alias="Section" type="org.apache.ibatis.domain.blog.Section"/>
        <typeAlias alias="Tag" type="org.apache.ibatis.domain.blog.Tag"/>
        <!--也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean
        每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 domain.blog.Author 的别名为 author；若有注解，则别名为其注解值。
        @Alias("author")
        public class Author {
            ...
        }
        -->
        <package name="domain.blog"/>
    </typeAliases>

    <!--类型处理器: 无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型
    你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。 具体做法为：实现 org.apache.ibatis.type.TypeHandler 接口，
    或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler， 然后可以选择性地将它映射到一个 JDBC 类型:
    // ExampleTypeHandler.java
    @MappedJdbcTypes(JdbcType.VARCHAR)
    public class ExampleTypeHandler extends BaseTypeHandler<String> {

      @Override
      public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException {
        ps.setString(i, parameter);
      }

      @Override
      public String getNullableResult(ResultSet rs, String columnName) throws SQLException {
        return rs.getString(columnName);
      }

      @Override
      public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
        return rs.getString(columnIndex);
      }

      @Override
      public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
        return cs.getString(columnIndex);
      }
    }

    使用上述的类型处理器将会覆盖已经存在的处理 Java 的 String 类型属性和 VARCHAR 参数及结果的类型处理器。 要注意 MyBatis
    不会通过窥探数据库元信息来决定使用哪种类型，所以你必须在参数和结果映射中指明那是 VARCHAR 类型的字段， 以使其能够绑定到正确的类型处理器上。这是因为 MyBatis 直到语句被执行时才清楚数据类型。

    通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：

    在类型处理器的配置元素（typeHandler 元素）上增加一个 javaType 属性（比如：javaType="String"）；
    在类型处理器的类上（TypeHandler class）增加一个 @MappedTypes 注解来指定与其关联的 Java 类型列表。 如果在 javaType 属性中也同时指定，则注解方式将被忽略。
    可以通过两种方式来指定被关联的 JDBC 类型：

    在类型处理器的配置元素上增加一个 jdbcType 属性（比如：jdbcType="VARCHAR"）；
    在类型处理器的类上增加一个 @MappedJdbcTypes 注解来指定与其关联的 JDBC 类型列表。 如果在 jdbcType 属性中也同时指定，则注解方式将被忽略。
    当在 ResultMap 中决定使用哪种类型处理器时，此时 Java 类型是已知的（从结果类型中获得），但是 JDBC 类型是未知的。 因此 Mybatis 使用
    javaType=[Java 类型], jdbcType=null 的组合来选择一个类型处理器。 这意味着使用 @MappedJdbcTypes 注解可以限制类型处理器的范围，同时除
    非显式的设置，否则类型处理器在 ResultMap 中将是无效的。 如果希望在 ResultMap 中使用类型处理器，那么设置 @MappedJdbcTypes 注解的
    includeNullJdbcType=true 即可。 然而从 Mybatis 3.4.0 开始，如果只有一个注册的类型处理器来处理 Java 类型，那么它将是 ResultMap
    使用 Java 类型时的默认值（即使没有 includeNullJdbcType=true）。

    -->
    <typeHandlers>
        <typeHandler javaType="String" jdbcType="VARCHAR" handler="org.apache.ibatis.builder.CustomStringTypeHandler"/>
        <package name="org.mybatis.example"/>
    </typeHandlers>

    <objectFactory type="org.apache.ibatis.builder.ExampleObjectFactory">
        <property name="objectFactoryProperty" value="100"/>
    </objectFactory>

    <!--
    插件（plugins）
    MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：
        Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)
        ParameterHandler (getParameterObject, setParameters)
        ResultSetHandler (handleResultSets, handleOutputParameters)
        StatementHandler (prepare, parameterize, batch, update, query)
    这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看 MyBatis 发行包中的源代码。 如果你想做的不仅仅是监控方法的调用，
    那么你最好相当了解要重写的方法的行为。 因为如果在试图修改或重写已有方法的行为的时候，你很可能在破坏 MyBatis 的核心模块。
    这些都是更低层的类和方法，所以使用插件的时候要特别当心。

    通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。
    -->
    <plugins>
        <plugin interceptor="org.apache.ibatis.builder.ExamplePlugin">
            <property name="pluginProperty" value="100"/>
        </plugin>
    </plugins>

    <!--环境配置-->
    <environments default="development">
        <environment id="development">
            <!--事务管理器（transactionManager）
            在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：

            JDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。
            MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。
            默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为
            -->
            <transactionManager type="JDBC">
                <property name="" value=""/>
            </transactionManager>
            <!--
            有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：

            UNPOOLED– 这个数据源的实现只是每次被请求时打开和关闭连接。虽然有点慢，但对于在数据库连接可用性方面没有太高要求的简单应用程序
            来说，是一个很好的选择。 不同的数据库在性能方面的表现也是不一样的，对于某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源具有以下属性。：

            driver – 这是 JDBC 驱动的 Java 类的完全限定名（并不是 JDBC 驱动中可能包含的数据源类）。
            url – 这是数据库的 JDBC URL 地址。
            username – 登录数据库的用户名。
            password – 登录数据库的密码。
            defaultTransactionIsolationLevel – 默认的连接事务隔离级别。
            defaultNetworkTimeout – The default network timeout value in milliseconds to wait for the database operation
            to complete. See the API documentation of java.sql.Connection#setNetworkTimeout() for details.
            作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上“driver.”前缀即可，例如：

            driver.encoding=UTF8
            这将通过 DriverManager.getConnection(url,driverProperties) 方法传递值为 UTF8 的 encoding 属性给数据库驱动。

            POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这是一种使得并发 Web 应用快速响应请求的流行处理方式。

            除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：

            poolMaximumActiveConnections – 在任意时间可以存在的活动（也就是正在使用）连接数量，默认值：10
            poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。
            poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）
            poolTimeToWait – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直安静的失败），默认值：20000 毫秒（即 20 秒）。
            poolMaximumLocalBadConnectionTolerance – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和。 默认值：3 （新增于 3.4.5）
            poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动失败时带有一个恰当的错误消息。
            poolPingEnabled – 是否启用侦测查询。若开启，需要设置 poolPingQuery 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。
            poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。


            JNDI – 这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。这种数据源配置只需要两个属性：

            initial_context – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么将会直接从 InitialContext 中寻找 data_source 属性。
            data_source – 这是引用数据源实例位置的上下文的路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。
            和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给初始上下文。比如：

            env.encoding=UTF8
            这就会在初始上下文（InitialContext）实例化时往它的构造方法传递值为 UTF8 的 encoding 属性。

            你可以通过实现接口 org.apache.ibatis.datasource.DataSourceFactory 来使用第三方数据源：
            -->
            <dataSource type="UNPOOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--数据库厂商标识-->
    <databaseIdProvider type="DB_VENDOR">
        <property name="SQL Server" value="sqlserver"/>
        <property name="DB2" value="db2"/>
        <property name="Oracle" value="oracle" />
    </databaseIdProvider>

    <!-- 使用相对于类路径的资源引用 -->
    <mappers>
        <mapper resource="org/mybatis/builder/AuthorMapper.xml"/>
        <mapper resource="org/mybatis/builder/BlogMapper.xml"/>
        <mapper resource="org/mybatis/builder/PostMapper.xml"/>
    </mappers>
    <!-- 使用完全限定资源定位符（URL）
    <mappers>
        <mapper url="file:///var/mappers/AuthorMapper.xml"/>
        <mapper url="file:///var/mappers/BlogMapper.xml"/>
        <mapper url="file:///var/mappers/PostMapper.xml"/>
    </mappers>
     -->
    <!-- 使用映射器接口实现类的完全限定类名
    <mappers>
        <mapper class="org.mybatis.builder.AuthorMapper"/>
        <mapper class="org.mybatis.builder.BlogMapper"/>
        <mapper class="org.mybatis.builder.PostMapper"/>
    </mappers>
    -->
    <!-- 将包内的映射器接口实现全部注册为映射器
    <mappers>
        <package name="org.mybatis.builder"/>
    </mappers>
    -->
</configuration>
